name: Publish QPM Package

env:
    ndkname: android-ndk-r22
    module_id: pinkcore
    qmodName: PinkCore
    
on:
  push:
    tags:
      - 'v*'

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
      name: Checkout
      with:
        submodules: true
        lfs: true
    
    - uses: seanmiddleditch/gha-setup-ninja@v3
    
    - name: Create ndkpath.txt
      run: |
        echo "$ANDROID_NDK_LATEST_HOME" > ${GITHUB_WORKSPACE}/ndkpath.txt
        cat ${GITHUB_WORKSPACE}/ndkpath.txt

    - name: Get QPM
      if: steps.cache-qpm.outputs.cache-hit != 'true'
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: cargo-build.yml
        name: linux-qpm
        path: QPM
        repo: QuestPackageManager/QPM.CLI
      
    - name: QPM Collapse
      run: |
        chmod +x ./QPM/qpm
        ./QPM/qpm collapse

    - name: QPM Dependencies Cache
      id: cache-qpm-deps
      uses: actions/cache@v2
      env:
        cache-name: cache-qpm-deps
      with:
        path: /home/runner/.local/share/qpm/cache
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('qpm.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: QPM Restore
      run: |
        ./QPM/qpm restore

    - name: Get Tag Version
      id: get_tag_version
      run: |
        echo ${GITHUB_REF#refs/tags/}
        echo ::set-output name=TAG::${GITHUB_REF#refs/tags/}
        echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/v}
      
    - name: QPM Edit Version
      run: |
        ./QPM/qpm package edit --version "${{ steps.get_tag_version.outputs.VERSION }}"
        
    - name: Build
      run: |
        cd ${GITHUB_WORKSPACE}
        ./QPM/qpm qmod build
        pwsh -Command ./build.ps1
    
    - name: Create Qmod
      run: |
        pwsh -Command ./createqmod.ps1 ${{env.qmodName}}

    # Commit the change to the package, .vscode/c_cpp_properties.json, and Android.mk
    - name: Configure commit
      run: |
        git config user.name "Github Actions"
        git config user.email "<>"
    - name: Commit Edit Version
      run: |
        git add ./qpm.json
        git commit -m "Update Version and post restore" --allow-empty
    # Then, we want to use the commit we have just made, and force push our tag to that commit
    - name: Get Commit ID
      id: get_commit_id
      run: |
        echo `git rev-parse HEAD`
        echo ::set-output name=ID::`git rev-parse HEAD`
    - name: Force create tag
      run: |
        git tag --force ${{ steps.get_tag_version.outputs.TAG }} ${{ steps.get_commid_id.outputs.ID }}
    # Then, push, upload our artifacts, modify the config file to have soLink and debugSoLink
    - name: Create and push version specific branch
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git branch version-${{ steps.get_tag_version.outputs.TAG }}
        git push -u origin version-${{ steps.get_tag_version.outputs.TAG }} --force --tags
    # Get release that was created for this tag
    - name: Get Release
      uses: octokit/request-action@v2.x
      id: get_release
      with:
          route: GET /repos/:repository/releases/tags/${{ steps.get_tag_version.outputs.TAG }}
          repository: ${{ github.repository }}
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get Release Upload URL
      id: get_upload_url
      run: |
        url=$(echo "$response" | jq -r '.upload_url')
        echo $url
        echo "::set-output name=upload_url::$url"
      env: 
          response:  ${{ steps.get_release.outputs.data }}

    - name: Get Library Name
      id: libname
      run: |
        cd ./build/
        pattern="lib${module_id}*.so"
        files=( $pattern )
        echo ::set-output name=NAME::"${files[0]}"

    # Upload our release assets
    - name: Upload Release Asset
      id: upload_release_asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_upload_url.outputs.upload_url }}
        asset_path: ./build/${{ steps.libname.outputs.NAME }}
        asset_name: ${{ steps.libname.outputs.NAME }}
        asset_content_type: application/octet-stream

    - name: Upload Debug Asset
      id: upload_debug_asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_upload_url.outputs.upload_url }}
        asset_path: ./build/debug/${{ steps.libname.outputs.NAME }}
        asset_name: debug_${{ steps.libname.outputs.NAME }}
        asset_content_type: application/octet-stream

    - name: Upload Qmod asset
      id: upload_qmod_asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_upload_url.outputs.upload_url }}
        asset_path: ./${{ env.qmodName }}.qmod
        asset_name: ${{ env.qmodName }}.qmod
        asset_content_type: application/octet-stream  

    - name: Change QPM Package Info
      run: |
        ./QPM/qpm package edit-extra --branchName "version-${{ steps.get_tag_version.outputs.TAG }}"
        ./QPM/qpm package edit-extra --soLink "${{ steps.upload_release_asset.outputs.browser_download_url }}"
        ./QPM/qpm package edit-extra --debugSoLink "${{ steps.upload_debug_asset.outputs.browser_download_url }}"
        ./QPM/qpm package edit-extra --modLink "${{ steps.upload_qmod_asset.outputs.browser_download_url }}"

    - name: Commit Changed package info
      run: |
        git add qpm.json
        git commit -m "Updated qpm.json"
      
    # Then, we want to use the commit we have just made, and force push our tag to that commit
    - name: Get Commit ID
      id: get_created_commit_id
      run: |
        echo `git rev-parse HEAD`
        echo ::set-output name=ID::`git rev-parse HEAD`
      
    - name: Push New Commit and Tag
      run: |
        git push origin HEAD:version-${{ steps.get_tag_version.outputs.TAG }} --force
        git tag --force ${{ steps.get_tag_version.outputs.TAG }} ${{ steps.get_created_commit_id.outputs.ID }}
        git push --tags --force
        
    - name: QPM Publish
      run: ./QPM/qpm publish "${{secrets.QPM_KEY}}"
